name: CI/CD Pipeline

on:
    push:
        branches: [main, master, develop]
        tags: ["v*"]
    pull_request:
        branches: [main, master, develop]
    workflow_dispatch:
        inputs:
            environment:
                description: "Deploy to environment"
                required: true
                default: "staging"
                type: choice
                options:
                    - staging
                    - production

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    # ============== CI JOBS ==============
    test:
        name: Test & Quality
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [18.x, 20.x]

        services:
            mongodb:
                image: mongo:7.0
                ports:
                    - 27017:27017
                options: >-
                    --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: TypeScript type checking
              run: npm run typecheck

            - name: Run tests with coverage
              run: npm run test:coverage
              env:
                  NODE_ENV: test
                  MONGODB_URI: mongodb://localhost:27017/stayhub-test
                  JWT_SECRET: test_jwt_secret_key
                  JWT_REFRESH_SECRET: test_refresh_secret_key

            - name: Upload coverage
              if: matrix.node-version == '20.x'
              uses: codecov/codecov-action@v4
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage/lcov.info
                  fail_ci_if_error: false

            - name: Security audit
              run: npm audit --audit-level high
              continue-on-error: true

            - name: Build application
              run: npm run build

    # ============== CD JOBS ==============
    build-and-push:
        name: Build & Push Image
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name != 'pull_request'
        permissions:
            contents: read
            packages: write

        outputs:
            image-tag: ${{ steps.meta.outputs.tags }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=semver,pattern={{version}}
                      type=sha,prefix={{branch}}-

            - name: Build and push
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    deploy-staging:
        name: Deploy Staging
        runs-on: ubuntu-latest
        needs: build-and-push
        if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')

        steps:
            - name: Deploy to staging
              run: |
                  echo "üöÄ Deploying to staging..."
                  echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
                  # Add your staging deployment commands here

            - name: Health check
              run: |
                  echo "‚ö° Running health checks..."
                  # curl -f https://staging-api.stayhub.com/api/health

    deploy-production:
        name: Deploy Production
        runs-on: ubuntu-latest
        needs: build-and-push
        if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')

        steps:
            - name: Deploy to production
              run: |
                  echo "üöÄ Deploying to production..."
                  echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
                  # Add your production deployment commands here

            - name: Health check
              run: |
                  echo "‚ö° Running health checks..."
                  # curl -f https://api.stayhub.com/api/health

            - name: Notify success
              uses: 8398a7/action-slack@v3
              with:
                  status: success
                  text: "‚úÖ Production deployment successful"
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    # ============== NOTIFICATION ==============
    notify:
        name: Notify Status
        runs-on: ubuntu-latest
        needs: [test, build-and-push, deploy-staging, deploy-production]
        if: always() && (failure() || cancelled())

        steps:
            - name: Notify failure
              uses: 8398a7/action-slack@v3
              with:
                  status: failure
                  text: "‚ùå Pipeline failed for ${{ github.repository }}"
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
